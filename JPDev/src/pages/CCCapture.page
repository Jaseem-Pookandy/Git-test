<apex:page showHeader="false" standardStylesheets="true" standardController="Opportunity" extensions="CCCaptureController" action="{!PrepthePage}" >	
	
	<head>

	<meta name="viewport" content="width=device-width, initial-scale=1" />

	<apex:includeScript value="{!URLFOR($Resource.jqueryui, '/js/jquery-1.10.2.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.jqueryui, '/js/jquery-ui-1.10.4.custom.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.jqueryui, '/js/jquery.maskedinput.min.js')}"/>

    <apex:stylesheet value="{!URLFOR($Resource.jqueryui, '/css/redmond/jquery-ui-1.10.4.custom.min.css')}"/>	

	<apex:includeScript value="{!URLFOR($Resource.bootstrap334, 'js/bootstrap.min.js')}"/>
	<apex:stylesheet value="{!URLFOR($Resource.bootstrap334, 'css/bootstrap.min.css')}" />
	<apex:stylesheet value="{!URLFOR($Resource.bootstrap334, 'css/bootstrap-theme.min.css')}" />	

	<script type="text/javascript">
		
		var ValidName;
		var ValidStreet;
		var ValidPostal;
		var ValidEmail;
		var ValidCCNum;
		var ValidCCMonth;
		var ValidCCYear;
		var ValidCVV;	
		var ValidCCYearMonthCombo;

		var ValidCity;
		var ValidState;
		var ValidCountry;
		var ValidPhone;

		var ccType;
		var ccNumClean;

		var my_SaveNewCCToSFDCFunction = null;
		var my_SaveExistingCCFunction = null;

		var $ = jQuery.noConflict();

		$(document).ready(function() {

			if ({!easyPath} == true) {

				$("#ccPanels").accordion(
					{ 
						active: 0,
						collapsible: false,
						heightStyle: 'content'
					}
				);	

			}
			else {

				$("#ccPanels").accordion(
					{ 
						active: false,
						collapsible: true,
						heightStyle: 'content'
					}
				);
			}

			var ExamineBothStateAndCountry = function() {
					//United States if using full text, otherwise the 3 char ISO code is 'USA'
				if ((($('#state').val().length != 0) && ($('#country').val() == 'USA')) || (($('#state').val().length == 0) && ($('#country').val() != 'USA'))) {
					$('#stateDiv').removeClass('has-error');
					$('#stateDiv').addClass('has-success');
					$('#stateMsg').hide();
					ValidState = true;
				} else {
					$('#stateDiv').removeClass('has-success');
					$('#stateDiv').addClass('has-error');
					$('#stateMsg').show();
					ValidState = false;
				}

				if ($('#country').val().length != 0) {
					$('#countryDiv').removeClass('has-error');
					$('#countryDiv').addClass('has-success');
					$('#countryMsg').hide();
					ValidCountry = true;
				} else {
					$('#countryDiv').removeClass('has-success');
					$('#countryDiv').addClass('has-error');
					$('#countryMsg').show();
					ValidCountry = false;
				}
			};

			var ScrubCCNum = function(ccToScrub) {

				var strScrubbed = '';	
				var thisNum = ccToScrub.replace(/\-/g, '');						

				for (i = 0; i < thisNum.length; i++) {
					if (i > thisNum.length - 5) strScrubbed += thisNum.substring(i, i+1);
					else strScrubbed += '*';
				}

				return strScrubbed;
			};

			//Hide all the message spans upon initial render

			$("[id$='-cardYearOldMsg']").hide();
			$("[id$='-cardMonthOldMsg']").hide();

			$('#cardNameMsg').hide();
			$('#address1Msg').hide();
			$('#cityMsg').hide();
			$('#stateMsg').hide();
			$('#postalCodeMsg').hide();
			$('#countryMsg').hide();
			$('#emailMsg').hide();
			$('#phoneNumMsg').hide();			
			$('#cardNumberMsg').hide();
			$('#cardMonthMsg').hide();
			$('#cardYearMsg').hide();
			$('#CVVMsg').hide();

			//Mask the input field:
			$('#card-number').mask('9999-9999-9999-9?999');
			$('#cvvCode').mask('999?9');

			$('#card-holder-name').blur(function() {

				if (isNameValid($(this).val())) {
					$('#cardNameDiv').removeClass('has-error');
					$('#cardNameDiv').addClass('has-success');
					$('#cardNameSpan').removeClass('glyphicon-remove');
					$('#cardNameSpan').addClass('glyphicon-ok');
					$('#cardNameMsg').hide();
					ValidName = true;
				} else {
					$('#cardNameDiv').removeClass('has-success');
					$('#cardNameDiv').addClass('has-error');
					$('#cardNameSpan').removeClass('glyphicon-ok');
					$('#cardNameSpan').addClass('glyphicon-remove');
					$('#cardNameMsg').show();
					ValidName = false;			
				}
			});

			$('#street-address-1').blur(function() {

				if (isStreet1Valid($(this).val())) {
					$('#address1Div').removeClass('has-error');
					$('#address1Div').addClass('has-success');
					$('#address1Span').removeClass('glyphicon-remove');
					$('#address1Span').addClass('glyphicon-ok');
					$('#address1Msg').hide();
					ValidStreet = true;
				} else {
					$('#address1Div').removeClass('has-success');
					$('#address1Div').addClass('has-error');
					$('#address1Span').removeClass('glyphicon-ok');
					$('#address1Span').addClass('glyphicon-remove');
					$('#address1Msg').show();
					ValidStreet = false;
				}
			});

			$('#city').blur(function() {

				if (isCityValid($(this).val())) {
					$('#cityDiv').removeClass('has-error');
					$('#cityDiv').addClass('has-success');
					$('#citySpan').removeClass('glyphicon-remove');
					$('#citySpan').addClass('glyphicon-ok');
					$('#cityMsg').hide();
					ValidCity = true;
				} else {
					$('#cityDiv').removeClass('has-success');
					$('#cityDiv').addClass('has-error');
					$('#citySpan').removeClass('glyphicon-ok');
					$('#citySpan').addClass('glyphicon-remove');
					$('#cityMsg').show();
					ValidCity = false;
				}
			});

			$('#state').blur(function() {
				ExamineBothStateAndCountry();
			});			

			$('#postal-code').blur(function() {

				if ($(this).val().length != 0) {
					$('#postalCodeDiv').removeClass('has-error');
					$('#postalCodeDiv').addClass('has-success');
					$('#postalCodeSpan').removeClass('glyphicon-remove');
					$('#postalCodeSpan').addClass('glyphicon-ok');
					$('#postalCodeMsg').hide();
					ValidPostal = true;
				} else {
					$('#postalCodeDiv').removeClass('has-success');
					$('#postalCodeDiv').addClass('has-error');
					$('#postalCodeSpan').removeClass('glyphicon-ok');
					$('#postalCodeSpan').addClass('glyphicon-remove');
					$('#postalCodeMsg').show();
					ValidPostal = false;
				}
			});

			$('#country').blur(function() {
				ExamineBothStateAndCountry();
			});

			$('#email-address').blur(function() {

				if (isValidEmailAddress($(this).val())) {
					$('#emailDiv').removeClass('has-error');
					$('#emailDiv').addClass('has-success');
					$('#emailSpan').removeClass('glyphicon-remove');
					$('#emailSpan').addClass('glyphicon-ok');
					$('#emailMsg').hide();
					ValidEmail = true;
				} else {
					$('#emailDiv').removeClass('has-success');
					$('#emailDiv').addClass('has-error');
					$('#emailSpan').removeClass('glyphicon-ok');
					$('#emailSpan').addClass('glyphicon-remove');
					$('#emailMsg').show();
					ValidEmail = false;
				}
			});

			$('#phoneNum').blur(function() {

				if (isValidPhoneNumber($(this).val())) {
					$('#phoneNumDiv').removeClass('has-error');
					$('#phoneNumDiv').addClass('has-success');
					$('#phoneNumSpan').removeClass('glyphicon-remove');
					$('#phoneNumSpan').addClass('glyphicon-ok');
					$('#phoneNumMsg').hide();
					ValidPhone = true;
				} else {
					$('#phoneNumDiv').removeClass('has-success');
					$('#phoneNumDiv').addClass('has-error');
					$('#phoneNumSpan').removeClass('glyphicon-ok');
					$('#phoneNumSpan').addClass('glyphicon-remove');
					$('#phoneNumMsg').show();
					ValidPhone = false;
				}
			});

			$('#card-number').blur(function() {

				if ($(this).val().length != 0) {

					var thisNum = $(this).val().replace(/\-/g, '');
					ccNumClean = thisNum;

					//Visa
					if (thisNum.substr(0,1) == '4') {
						$('#cc_image').attr('src', '{!$Resource.Credit_Card_Icons}/visa.png');
						ccType = 'Visa';

						//13 or 16 digits are valid
						if ((thisNum.length == 13) || (thisNum.length == 16)) ValidCCNum = true;
						else ValidCCNum = false;						
					}

					//Mastercard
					else if (thisNum.substr(0,1) == '5') {
						$('#cc_image').attr('src', '{!$Resource.Credit_Card_Icons}/mc.png');
						ccType = 'MasterCard';

						//The second digit must be 1 through 5 inclusive
						if ((thisNum.length == 16) && (thisNum.substr(1, 1) < 6) && (thisNum.substr(1, 1) > 0)) ValidCCNum = true;
						else ValidCCNum = false;
					}

					//Amex 
					else if (thisNum.substr(0,1) == '3') {
						$('#cc_image').attr('src', '{!$Resource.Credit_Card_Icons}/amex.png');
						ccType = 'AmericanExpress';

						//The second digit must be either a 3 or a 7
						if ((thisNum.length == 15) && ((thisNum.substr(1, 1) == '4') || (thisNum.substr(1, 1) == '7'))) ValidCCNum = true;	
						else ValidCCNum = false;
					}

					//Discover
					else if (thisNum.substr(0,1) == '6') {
						$('#cc_image').attr('src', '{!$Resource.Credit_Card_Icons}/discover.png');
						ccType = 'Discover';

						//Must be 16 digits
						if (thisNum.length == 16) {
							//this one compares ranges...
							var thisRange = (thisNum.substr(0, 8));

							if (thisRange >= 60110000 && thisRange <= 60119999) ValidCCNum = true;
							else if (thisRange >= 65000000 && thisRange <= 65999999) ValidCCNum = true;
							else if (thisRange >= 62212600 && thisRange <= 62292599) ValidCCNum = true;

							else ValidCCNum = false;
						}
						else ValidCCNum = false;
					}

					else {
						$('#cc_image').attr('src', '{!$Resource.Credit_Card_Icons}/cc_blank.png');	
						ValidCCNum = false;
					}

					if (ValidCCNum == true) {
						$('#cardNumberDiv').removeClass('has-error');
						$('#cardNumberDiv').addClass('has-success');
						$('#cardNumberSpan').removeClass('glyphicon-remove');
						$('#cardNumberSpan').addClass('glyphicon-ok');
						$('#cardNumberMsg').hide();
					}
					else {
						$('#cardNumberDiv').removeClass('has-success');
						$('#cardNumberDiv').addClass('has-error');
						$('#cardNumberSpan').removeClass('glyphicon-ok');
						$('#cardNumberSpan').addClass('glyphicon-remove');
						$('#cardNumberMsg').show();
					}

				} else {
					$('#cardNumberDiv').removeClass('has-success');
					$('#cardNumberDiv').addClass('has-error');
					$('#cardNumberSpan').removeClass('glyphicon-ok');
					$('#cardNumberSpan').addClass('glyphicon-remove');
					$('#cardNumberMsg').show();
					ValidCCNum = false;

					//reset the image
					$('#cc_image').attr('src', '{!$Resource.Credit_Card_Icons}/cc_blank.png');
				}
			});

			$('#expiry-month').blur(function() {

				if (isCCMonthValid($(this).val())) {
					$('#cardMonthDiv').removeClass('has-error');
					$('#cardMonthDiv').addClass('has-success');
					$('#cardMonthMsg').hide();
					ValidCCMonth = true;

					if ($("[id$='expiry-yearNew']").val() != '') {
						if (isCCYearMonthValid($('#expiry-month').val(), $("[id$='expiry-yearNew']").val())) {
							ValidCCYearMonthCombo = true;
							$('#cardYearDiv').removeClass('has-error');
							$('#cardYearDiv').addClass('has-success');
							$('#cardYearMsg').hide();
						}
						else {
							ValidCCYearMonthCombo = false;	
							$('#cardYearDiv').removeClass('has-success');
							$('#cardYearDiv').addClass('has-error');
							$('#cardMonthDiv').removeClass('has-success');
							$('#cardMonthDiv').addClass('has-error');
							var expired = 'The card expiration month/year has expired.';
							$('#cardMonthMsg').html(expired);
							$('#cardYearMsg').html(expired);
							$('#cardMonthMsg').show();
							$('#cardYearMsg').show();
						} 
					}

				} else {
					$('#cardMonthDiv').removeClass('has-success');
					$('#cardMonthDiv').addClass('has-error');
					$('#cardMonthMsg').show();
					ValidCCMonth = false;
				}
			});

			$("[id$='expiry-yearNew']").blur(function() {

				if (isCCYearValid($(this).val())) {
					$('#cardYearDiv').removeClass('has-error');
					$('#cardYearDiv').addClass('has-success');
					$('#cardYearMsg').hide();
					ValidCCYear = true;

					if ($('#expiry-month').val() != '') {

						if (isCCYearMonthValid($('#expiry-month').val(), $("[id$='expiry-yearNew']").val())) {
							ValidCCYearMonthCombo = true;
							$('#cardMonthDiv').removeClass('has-error');
							$('#cardMonthDiv').addClass('has-success');
							$('#cardMonthMsg').hide();
						}
						else {
							ValidCCYearMonthCombo = false;	
							$('#cardYearDiv').removeClass('has-success');
							$('#cardYearDiv').addClass('has-error');
							$('#cardMonthDiv').removeClass('has-success');
							$('#cardMonthDiv').addClass('has-error');
							var expired = 'The card expiration month/year has expired.';
							$('#cardMonthMsg').html(expired);
							$('#cardYearMsg').html(expired);
							$('#cardMonthMsg').show();
							$('#cardYearMsg').show();
						} 
					}

				} else {
					$('#cardYearDiv').removeClass('has-success');
					$('#cardYearDiv').addClass('has-error');
					$('#cardYearMsg').show();
					ValidCCYear = false;
				}
			});			

			$('#cvvCode').blur(function() {

				if ($(this).val().length != 0) {
					$('#CVVDiv').removeClass('has-error');
					$('#CVVDiv').addClass('has-success');
					$('#CVVSpan').removeClass('glyphicon-remove');
					$('#CVVSpan').addClass('glyphicon-ok');
					$('#CVVMsg').hide();
					ValidCVV = true;
				} else {
					$('#CVVDiv').removeClass('has-success');
					$('#CVVDiv').addClass('has-error');
					$('#CVVSpan').removeClass('glyphicon-ok');
					$('#CVVSpan').addClass('glyphicon-remove');
					$('#CVVMsg').show();
					ValidCVV = false;
				}
			});

			$("[id$='expiry-yearOld']").blur(function() {

				var parentId = $(this).closest("div").attr("id");
				var ccIdSelected = parentId.substr(1, 32);	//confirmed correct.  This is the Id of the card that will be (re)used.  (Starts with 'A' - will be ignored)

				//We now have the ccId so we can then build the Id and evaluate and adjust error messages, if necessary.
				var parentDivGroupId = 'A' + ccIdSelected;

				var expMonthOldSpan = parentDivGroupId + '-cardMonthOldSpan';
				var expYearOldSpan = parentDivGroupId + '-cardYearOldSpan';
				var expMonthOldMsg = parentDivGroupId + '-cardMonthOldMsg';
				var expYearOldMsg = parentDivGroupId + '-cardYearOldMsg';

				var expMonthOldVal, expMonthOldControlId, expMonthOldDivId;
				var expYearOldVal, expYearOldControlId, expYearOldDivId;

				expMonthOldDivId = 'A' + ccIdSelected + '-cardMonthOldDiv';
				expYearOldDivId  = 'A' + ccIdSelected + '-cardYearOldDiv';

				//alert(parentDivGroupId);

				$('#' + parentDivGroupId).find('select').each(function () {
					if (this.id.match("expiry-MonthOld$")) {
					 	expMonthOldControlId = this.id;
					 	expMonthOldVal = $(this).val();
					}

					if (this.id.match("expiry-yearOld$")) {
					 	expYearOldControlId = this.id;
					 	expYearOldVal = $(this).val();
					}
				});				

				if (isCCYearValid(expYearOldVal)) {
					$('#' + expYearOldDivId).removeClass('has-error');
					$('#' + expYearOldDivId).addClass('has-success');
					$('#' + expYearOldMsg).hide();
					ValidCCYear = true;

					if (isCCYearMonthValid(expMonthOldVal, expYearOldVal)) {
						ValidCCYearMonthCombo = true;
						$('#' + expMonthOldDivId).removeClass('has-error');
						$('#' + expMonthOldDivId).addClass('has-success');
						$('#' + expMonthOldMsg).hide();
					}
					else {
						ValidCCYearMonthCombo = false;	
						$('#' + expYearOldDivId).removeClass('has-success');
						$('#' + expYearOldDivId).addClass('has-error');
						$('#' + expMonthOldDivId).removeClass('has-success');
						$('#' + expMonthOldDivId).addClass('has-error');
						var expired = 'The card expiration month/year has expired.';
						$('#' + expMonthOldMsg).html(expired);
						$('#' + expYearOldMsg).html(expired);
						$('#' + expMonthOldMsg).show();
						$('#' + expYearOldMsg).show();
					} 
				} 
				else {
					$('#' + expYearOldDivId).removeClass('has-success');
					$('#' + expYearOldDivId).addClass('has-error');
					$('#' + expYearOldMsg).show();
					ValidCCYear = false;
				}
			});			

			$("[id$='expiry-MonthOld']").blur(function() {

				var parentId = $(this).closest("div").attr("id");
				var ccIdSelected = parentId.substr(1, 32);	//confirmed correct.  This is the Id of the card that will be (re)used.  (Starts with 'A' - will be ignored)

				//We now have the ccId so we can then build the Id and evaluate and adjust error messages, if necessary.
				var parentDivGroupId = 'A' + ccIdSelected;

				var expMonthOldSpan = parentDivGroupId + '-cardMonthOldSpan';
				var expYearOldSpan = parentDivGroupId + '-cardYearOldSpan';
				var expMonthOldMsg = parentDivGroupId + '-cardMonthOldMsg';
				var expYearOldMsg = parentDivGroupId + '-cardYearOldMsg';

				var expMonthOldVal, expMonthOldControlId, expMonthOldDivId;
				var expYearOldVal, expYearOldControlId, expYearOldDivId;

				expMonthOldDivId = 'A' + ccIdSelected + '-cardMonthOldDiv';
				expYearOldDivId  = 'A' + ccIdSelected + '-cardYearOldDiv';

				$('#' + parentDivGroupId).find('select').each(function () {
					if (this.id.match("expiry-MonthOld$")) {
					 	expMonthOldControlId = this.id;
					 	expMonthOldVal = $(this).val();
					}

					if (this.id.match("expiry-yearOld$")) {
					 	expYearOldControlId = this.id;
					 	expYearOldVal = $(this).val();
					}
				});

				if (isCCMonthValid(expMonthOldVal)) {
					$('#' + expMonthOldDivId).removeClass('has-error');
					$('#' + expMonthOldDivId).addClass('has-success');
					$('#' + expMonthOldMsg).hide();
					ValidCCMonth = true;

					if (isCCYearMonthValid(expMonthOldVal, expYearOldVal)) {
						ValidCCYearMonthCombo = true;
						$('#' + expYearOldDivId).removeClass('has-error');
						$('#' + expYearOldDivId).addClass('has-success');
						$('#' + expYearOldMsg).hide();
					}
					else {
						ValidCCYearMonthCombo = false;	
						$('#' + expYearOldDivId).removeClass('has-success');
						$('#' + expYearOldDivId).addClass('has-error');
						$('#' + expMonthOldDivId).removeClass('has-success');
						$('#' + expMonthOldDivId).addClass('has-error');
						var expired = 'The card expiration month/year has expired.';
						$('#' + expMonthOldMsg).html(expired);
						$('#' + expYearOldMsg).html(expired);
						$('#' + expMonthOldMsg).show();
						$('#' + expYearOldMsg).show();
					} 
				} else {
					$('#' + expMonthOldDivId).removeClass('has-success');
					$('#' + expMonthOldDivId).addClass('has-error');
					$('#' + expMonthOldMsg).show();
					ValidCCYear = false;
				}
			});

			//If the Id of the control ends with 'submit_NewCC' (because apex tags mangle the Id)
			$("[id$='submit_NewCC']").click(function() {				

				$('#card-holder-name').blur();
				$('#street-address-1').blur();
				$('#street-address-2').blur();
				$('#city').blur();				
				$('#postal-code').blur();
				ExamineBothStateAndCountry();
				$('#email-address').blur();
				$('#phoneNum').blur();
				$('#card-number').blur();
				$('#expiry-month').blur();
				$("[id$='expiry-yearNew']").blur();
				$('#cvvCode').blur();

				if (($('#expiry-month').val() != '') && ($("[id$='expiry-yearNew']").val() != '')) {
					if (isCCYearMonthValid($('#expiry-month').val(), $("[id$='expiry-yearNew']").val())) {
						ValidCCYearMonthCombo = true;
					}
					else {
						ValidCCYearMonthCombo = false;	
						$('#cardYearDiv').removeClass('has-success');
						$('#cardYearDiv').addClass('has-error');
						$('#cardMonthDiv').removeClass('has-success');
						$('#cardMonthDiv').addClass('has-error');
						var expired = 'The card expiration month/year has expired.';
						$('#cardMonthMsg').html(expired);
						$('#cardYearMsg').html(expired);
						$('#cardMonthMsg').show();
						$('#cardYearMsg').show();
					} 
				}

				if (ValidName && ValidStreet && ValidPostal && ValidEmail && ValidCCNum && ValidCVV && ValidCCMonth && ValidCCYear && ValidCCYearMonthCombo && ValidCity && ValidState && ValidCountry && ValidPhone) {
					$('#waitingSearchDiv').css('display', 'block');

					if ({!postCardToZuora}) {
						PostNewCardToAPI('{!HMACSignature}', '{!HMACToken}', HostedPageForm);	
					}
					else {
						PostNewCardToSFDCOnly(HostedPageForm);
					}				
				}
				else {
					// alert('Correct the errors indicated on the page before proceeding.');
				}
			});

			$("[id$='-submit_ExistingCC']").click(function() {

				var ccIdSelected = this.id.substr(1, 32);	//confirmed correct.  This is the Id of the card that will be (re)used.  (Starts with 'A' - will be ignored)
				var parentDivGroupId = 'A' + ccIdSelected;

				//window.location.href = '/RemittanceManagement/CCExistingCard?zpmid=' + ccIdSelected + '&rlid={!thisLink.Id}&auth={!authTokenURLEncoded}&fr=' + Math.random();;
		    	//$('#waitingSearchDiv').css('display', 'none');

				//alert(ccIdSelected);

				$('#A'+ccIdSelected).each(function(i, div) {

					$(div).find(':input').each(function(j, element)  {

						var thisId = $(this).attr('id');

						if (thisId != null) {
							if (thisId.match('expiry-MonthOld$')) {
								expMonth = $(this).val();
							}
							else if (thisId.match('expiry-yearOld$')) {
								expYear = $(this).val();	
							} 
						}
					})
				});

				//alert('month: ' + expMonth);
				//alert('year: ' + expYear);

				var YearOldMsg = ccIdSelected + '-cardYearOldMsg';
				var MonthOldMsg = ccIdSelected + '-cardMonthOldMsg';
				var expMonthOldSpan = parentDivGroupId + '-cardMonthOldSpan';
				var expYearOldSpan = parentDivGroupId + '-cardYearOldSpan';
				var expMonthOldMsg = parentDivGroupId + '-cardMonthOldMsg';
				var expYearOldMsg = parentDivGroupId + '-cardYearOldMsg';

				var expMonthOldVal, expMonthOldControlId, expMonthOldDivId;
				var expYearOldVal, expYearOldControlId, expYearOldDivId;

				expMonthOldDivId = 'A' + ccIdSelected + '-cardMonthOldDiv';
				expYearOldDivId  = 'A' + ccIdSelected + '-cardYearOldDiv';				

				// TODO:		

				if (isCCYearMonthValid(expMonth, expYear)) {
					$('#' + expYearOldDivId).removeClass('has-error');
					$('#' + expYearOldDivId).addClass('has-success');
					$('#' + expYearOldMsg).hide();

					my_SaveExistingCCFunction(ccIdSelected);
				}
				else {
					$('#' + expYearOldDivId).removeClass('has-success');
					$('#' + expYearOldDivId).addClass('has-error');
					$('#' + expMonthOldDivId).removeClass('has-success');
					$('#' + expMonthOldDivId).addClass('has-error');
					var expired = 'The card expiration month/year has expired.';
					$('#' + expMonthOldMsg).html(expired);
					$('#' + expYearOldMsg).html(expired);
					$('#' + expMonthOldMsg).show();
					$('#' + expYearOldMsg).show();
				} 
			});
		
			function SaveNewDataToSalesforce(ScrubNum, zuoraPaymentMethodId) {

				//Any post of a card from this page means it was a new card.
				var ccNumToPost = $('#card-number').val();
				if (ScrubNum == true) ccNumToPost = ScrubCCNum(ccNumToPost);

				Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.CCCaptureController.PostToSalesforce}', 

						ccNumToPost, 
						'{!thisLink.Opportunity__c}',
						'{!thisLink.Id}',
						'{!ipAddress}',
						$('#card-holder-name').val(),
						$('#expiry-month').val(),
						$("[id$='expiry-yearNew']").val(),
						ccType,
						$('#notes').val(),
						true,
						{!isBillingAccountActivelyBilling},
						{!isAutoPayCurrentlyOn},
						{!billingAccountHasOpenInvoices},
						'{!billingAccountsDefaultPaymentMethodId}',
						{!remittanceLinkWasSentManually},
						'{!zuoraBillingAccountId}',
						zuoraPaymentMethodId,
						
					function(results, event) {

				        if (event.type === 'exception') {
				        	$('#waitingSearchDiv').css('display', 'none');
			      			window.location.href = '/RemittanceManagement/Result?code=JR_ERROR'; //javascript remoting error
				        }
				        else if (event.status) {
				            $('#waitingSearchDiv').css('display', 'none');
			      			window.location.href = '/RemittanceManagement/Result?code=SUCCESS';
				        }
				        else {
				            // console.log(event.message);
				            $('#waitingSearchDiv').css('display', 'none');
			      			window.location.href = '/RemittanceManagement/Result?code=NC';	//no clue
				        }
				    }
				);
			}

			my_SaveNewCCToSFDCFunction = SaveNewDataToSalesforce;

			function SaveExistingCCDataToSalesforce(paymentId) {

				$('#waitingSearchDiv').css('display', 'block');

				//We now have the ccId so we can then build the Id and evaluate and adjust error messages, if necessary.
				var parentDivGroupId = 'A' + paymentId;
				var expMonthOldVal;
				var expYearOldVal;

				$('#' + parentDivGroupId).find('select').each(function () {
					if (this.id.match("expiry-MonthOld$")) {
					 	expMonthOldVal = $(this).val();
					}

					if (this.id.match("expiry-yearOld$")) {
					 	expYearOldVal = $(this).val();
					}
				});							

				Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.CCCaptureController.SubmitExistingCCToZuoraAndSFDC}', 

						$('#A' + paymentId + '-ccNumOld').val(),
						'{!thisLink.Id}',
						'{!ipAddress}',
						$('#A' + paymentId + '-ccHolderName').val(),
						expMonthOldVal,
						expYearOldVal,
						null,
						$("#A" + paymentId + "-notesOld").val(),
						false,
						paymentId,
						{!isBillingAccountActivelyBilling},
						{!isAutoPayCurrentlyOn},
						{!billingAccountHasOpenInvoices},
						'{!billingAccountsDefaultPaymentMethodId}',
						{!remittanceLinkWasSentManually},
						'{!zuoraBillingAccountId}',
						
					function(results, event) {
				        if (event.type === 'exception') {
				        	$('#waitingSearchDiv').css('display', 'none');
			      			window.location.href = '/RemittanceManagement/Result?code=JR_ERROR'; //javascript remoting error
				        }
				        else if (event.status) {
				            $('#waitingSearchDiv').css('display', 'none');
			      			window.location.href = '/RemittanceManagement/Result?code=SUCCESS';
				        }
				        else {
				            // console.log(event.message);
				            $('#waitingSearchDiv').css('display', 'none');
			      			window.location.href = '/RemittanceManagement/Result?code=NC';	//no clue
				        }
				    }
				);
			}			

			my_SaveExistingCCFunction = SaveExistingCCDataToSalesforce;

		});

		function isCCYearMonthValid(month, year) {

			//build the dates in this format so a direct comparison will work:  YYYY-MM-DD
			var today = (new Date().getFullYear() + '-' + ("0" + (new Date().getMonth() + 1)).slice(-2) + '-' + ("0" + new Date().getDate()).slice(-2));
			var ccdate = year + '-' + month + '-' + '32';

			if (ccdate <= today) return false;

			return true;
		}

		function isCCYearValid(value) {

			if (!value || value == 'Year') return false;

			if (value >= new Date().getFullYear()) return true;

			return false;
		}

		function isCCMonthValid(value) {

			if (!value || value == 'Month') return false;
			
			var goodValues = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
			var index = $.inArray(value, goodValues);

			if (index > -1) return true;

			return false;
		}

		function isCityValid(city) {
			if (city && city.length > 2) return true;
			return false;
		}

		function isNameValid(name) {
			if (name && name.length > 2) return true;
			return false;
		}

		function isStreet1Valid(street) {
			if (street && street.length > 2) return true;
			return false;
		}

		function isValidPhoneNumber(phoneNum) {
    		//very, very primitive.  10 characters at least
    		if (phoneNum && phoneNum.length > 9) return true;
    		return false;
		}

		function isValidEmailAddress(emailAddress) {
    		var pattern = new RegExp(/^[+a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/i);
    		return pattern.test(emailAddress);
		}
		   
		function createXHR(method, url) {

			var xhr = new XMLHttpRequest();
			
			if (xhr) {
				// XHR for Chrome/Firefox/Opera/Safari.
				xhr.open(method, url, true);
			} else {
				// CORS not supported.
				xhr = null;
				alert('CORS not supported. Please use a modern, supported, full-featured web browser.');
			}
			return xhr;
		}
	
		function PostNewCardToSFDCOnly(thisForm) {

			//For Worldpay only, as this goes directly to SFDC (Opportunity) only, NOT to Zuora
			try {
				my_SaveNewCCToSFDCFunction(false, '');
			} 
			catch (e) {
				//alert("Error processing the request: " + e);
				window.location.href = '/RemittanceManagement/Result?code=ERROR_PROCESSING_REQUEST';
				$('#waitingSearchDiv').css('display', 'none');
			}
		}

		function PostNewCardToAPI(signature, token, thisForm) {
		
			//alert('HMAC Signature: ' + signature + ' ****** HMAC Token: ' + token);

			var postCreditCardURL = '{!finalURL}';
			var xhr = createXHR('post', postCreditCardURL);

			if (!xhr) {
				alert('CORS not supported. Please use a modern, supported, full-featured web browser.');
				$('#waitingSearchDiv').css('display', 'none');
		    	return;
			}

		  	// Set Headers
			xhr.setRequestHeader("signature", signature);
			xhr.setRequestHeader("token", token);
			xhr.setRequestHeader("Accept", "application/json");
			xhr.setRequestHeader("Content-Type", "application/json");			

			xhr.withCredentials = true;			

			xhr.onload = function() {
		  		
		    	var text = xhr.responseText;

		    	if (text) {

					//clean up the badly formed array first.
		    		var textArray = text.split('}{');
					if (textArray.length > 1) text = textArray[0] + '}';

					var json = JSON.parse(text);

		    		if (json.success) {
			      		my_SaveNewCCToSFDCFunction(true, json.paymentMethodId);
		    		}
		    		else {
		    			//Something didn't work quite right, could be invalid card, token used twice, etc...

		    			//Code examples:  52000320 == Invalid credit card number
		    			//			      52000000 == Merchant ID has not been set.
		    			//				  90000011 == Invalid token (timeout(?), reused, etc)

		    			//Loop until we get a 'code' value...
		    			//If there is an array of reasons in the response
		    			if (json.reasons) {
		    				reasonInfo = json.reasons;

		    				//for each reason object in the array
							for (var i = 0; i < reasonInfo.length; i++) {

								//If the code property exists as part of the reason object
								if (reasonInfo[i]['code']) {
									//alert('Error ' + reasonInfo[i]['code'] + '.  ' + reasonInfo[i]['message']);

									window.location.href = '/RemittanceManagement/Result?code=' + reasonInfo[i]['code'] + '&auth={!authTokenURLEncoded}&msg='+reasonInfo[i]['message'];
									//Need to return here otherwise the redirect happens below instead of here.
									return;
								}
							}		    				
		    			}
		    			window.location.href = '/RemittanceManagement/Result?code=UNTRAPPED_ERROR' + '&auth={!authTokenURLEncoded}';
			      		$('#waitingSearchDiv').css('display', 'none');
		    		}
		    	}
		    	else {
		    		//alert("failed to get response text");		    		
		    		window.location.href = '/RemittanceManagement/Result?code=NO_RESPONSE' + '&auth={!authTokenURLEncoded}';
		    		$('#waitingSearchDiv').css('display', 'none');
		    	}
		  	}; 

			xhr.onerror = function(error) {
		    	//alert('Whoops, there was an error making the request:' + error);
		    	window.location.href = '/RemittanceManagement/Result?code=ERROR_MAKING_REQUEST' + '&auth={!authTokenURLEncoded}';
		    	$('#waitingSearchDiv').css('display', 'none');
		  	};	

			var cardInfo = {
				"accountKey": '{!zuoraBillingAccountId}',
				"creditCardType": ccType,		//visa, mastercard, amex or discover are the valid options
				"creditCardNumber": ccNumClean,
				"expirationMonth": $('#expiry-month').val(),
				"expirationYear": $("[id$='expiry-yearNew']").val(),
				"securityCode": $('#cvvCode').val(),
				"defaultPaymentMethod": "true",
				"cardHolderInfo": {
					"cardHolderName": 	$('#card-holder-name').val(), 
					"addressLine1": 	$('#street-address-1').val(),
					"addressLine2": 	$('#street-address-2').val(),
					"city": 			$('#city').val(),
					"state": 			$('#state').val(),
					"zipCode": 			$('#postal-code').val(),
					"country": 			$('#country').val(),
					"phone": 			$('#phoneNum').val(),
					"email": 			$('#email-address').val()
				}
			};

			try {
				xhr.send(JSON.stringify(cardInfo));
			} 
			catch (e) {
				//alert("Error processing the request: " + e);
				window.location.href = '/RemittanceManagement/Result?code=ERROR_PROCESSING_REQUEST';
				$('#waitingSearchDiv').css('display', 'none');
			}
		}

	</script>

	<style type="text/css">

        .wideTextbox { width: 300px; }
        .superWideTextbox { width: 600px; }

        .DHX_Label {
            font-size: 100%;
            font-weight: bold;
            display: block;
            text-align: right;
            font-family: Arial,Helvetica,sans-serif;
            line-height: 1.3;
            padding-right: 10px;
            vertical-align: middle !important;
        }    

        .DHX_Data {
            font-size: 12px;
            font-weight: normal;
            text-align: left;
            font-family: Arial,Helvetica,sans-serif;
            line-height: 1.3;
            vertical-align: middle !important;
            width: 85% !important;
        }  

        .DHX_Loud {
        	font-size: 14px;
        	font-weight: bold;
        	text-align: center !important;
        	font-family: Arial,Helvetica,sans-serif;
            line-height: 1.3;
        }

        #ccPanels .ui-icon {
        	display: none; 
        }

        #ccPanels h3 {
        	text-align: center;
        	margin-top: 6px;
        }

        #ccMessageTD {
        	background-color: #F4F885;
        }

	</style>
	</head>	

	<apex:composition template="{!$Site.Template}">

		<apex:define name="body">

            <div class="waitingSearchDiv" id="waitingSearchDiv" name="waitingSearchDiv" style="background-color: rgba(0, 0, 0, 0.5); height:100%; width:100%; z-index: 9998; left: 0; top: 0; position: fixed; display:none;"> 
                <div class="waitingHolder" style="top: 300px; width: 200px; height:95px; border-radius: 25px; border: 2px solid #000000; background-color:#FFFFFF; z-index:9999; text-align: center; padding: 5px;">
                    <br/>
                    <img class="waitingImage" src="/img/loading.gif" />
                    <br/>
                    <span><strong>Processing...</strong></span>
                </div>
            </div>

			<div class="container-fluid">

				<br/>				

				<apex:outputPanel id="errorMessages">
		        	<apex:outputPanel rendered="{!errors.size > 0}" >
						<table id="message" align="center" class="table table-condensed">
							<br/>
							<apex:repeat value="{!errors}" var="err">  							
								<tr class="danger">
					            	<td style="text-align: center;">
		                    			<br/>{!err}<br/><br/>
		                    		</td>
		                    	</tr>
		                	</apex:repeat>						    
						</table>   
					</apex:outputPanel>
				</apex:outputPanel>

		        <br/>

				<apex:outputPanel id="infoMessages">
		        	<apex:outputPanel rendered="{!errors.size == 0}" >
						<table id="message" align="center" class="table table-condensed">
						    <tr class="info">
					            <td style="text-align: center;">
					            	<apex:outputText escape="false" value="{!headerText}"/>
					            </td>
					        </tr>
						</table>   
					</apex:outputPanel>
				</apex:outputPanel>
	        </div>

			<div class="container">

				<form id="HostedPageForm" name="HostedPageForm" class="form-horizontal" role="form" autocomplete="on">
					<apex:form >
					<apex:outputPanel rendered="{!readyToReceivePayment}" >

						<apex:outputPanel rendered="{!easyPath == false}" >
							<table id="ccMessage" align="center" class="table table-condensed">
							    <tr class="info">
						            <td id="ccMessageTD" style="text-align: center; padding-top: 20px; padding-bottom: 20px;">
						            	<apex:outputText escape="false" value="{!ccMessage}" />
						            </td>
						        </tr>
							</table>   
						</apex:outputPanel>

						<div id="ccPanels">

						<apex:repeat value="{!creditCardsInZuora}" var="thisCC">

							<!-- <h3>{!thisCC.cardNumber}, expiring in {!thisCC.expirationMonthPurdy} of {!thisCC.expirationYear}</h3> -->
							<h3>{!thisCC.cardNumber}, {!thisCC.headerLabel}</h3>
							<div id="A{!thisCC.id}">

<!-- 								<div class="form-group">
								    <div class="col-sm-12" style="text-align: center; padding-top: 5px; padding-bottom: 5px; border-radius: 8px; border: 1px solid #000000; ">
								        If this is the card you'd like to use for this purchase, click the button titled 'Continue with this Credit Card'.
								        <br/>
								        You will have the opportunity to update the expiration date on the next page if necessary.
								    </div>						    
								</div> -->

								<div class="form-group">
								    <label class="col-sm-3 control-label label-sm">Cardholder Name</label>
								    <div class="col-sm-7">
								        <input type="text" class="form-control input-sm" value="{!thisCC.cardholderName}" id="A{!thisCC.Id}-ccHolderName" disabled="true" />
								    </div>						    
								</div>

								<div class="form-group">
								    <label class="col-sm-3 control-label">Credit Card Number</label>
								    <div class="col-sm-1">
								    	<img id="A{!thisCC.id}-cc_imageOld" src="{!$Resource.Credit_Card_Icons}/{!thisCC.ccImageName}"/>
								    </div>
								    <div class="col-sm-6">
								        <input type="text" class="form-control input-sm" value="{!thisCC.cardNumber}" id="A{!thisCC.Id}-ccNumOld" disabled="true" />
								    </div>
								</div>

								<div id="A{!thisCC.id}-cardMonthOldDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label">Card Expiration Month</label>
								    <div class="col-sm-4 selectContainer"  id="A{!thisCC.id}-closestDiv">						    
										<!-- <input type="text" class="form-control input-sm" value="{!thisCC.expirationMonthShortAndLongForm}" disabled="true" /> -->
								    	<!-- Gotta use apex:selectList here so that the value is defaulted correctly... -->
 								    	<apex:selectList styleClass="form-control input-sm" size="1" id="expiry-MonthOld" value="{!thisCC.expirationMonth}">
								    		<apex:selectOptions value="{!ccExpirationMonthOptions}" />
								    	</apex:selectList>

						                <span id="A{!thisCC.id}-cardMonthOldSpan" class="glyphicon form-control-feedback"></span>
						                <span id="A{!thisCC.id}-cardMonthOldMsg" class="help-block">Credit Card Expiration Month is required.</span>								    	
								    </div>
								</div>

								<div id="A{!thisCC.id}-cardYearOldDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label">Card Expiration Year</label>
								    <div class="col-sm-4 selectContainer" id="A{!thisCC.id}-closestDiv">
								    	<!-- <input type="text" class="form-control input-sm" value="{!thisCC.expirationYear}" disabled="true" /> -->
								    	<apex:selectList styleClass="form-control input-sm" size="1" id="expiry-yearOld" required="true" value="{!thisCC.expirationYear}" >
								    		<apex:selectOptions value="{!ccExpirationYearOptions}" />
								    	</apex:selectList>

						                <span id="A{!thisCC.id}-cardYearOldSpan" class="glyphicon form-control-feedback"></span>
						                <span id="A{!thisCC.id}-cardYearOldMsg" class="help-block">Credit Card Expiration Year is required.</span>
								    </div>
								</div>								

								<div id="notesDiv" class="form-group has-feedback" style="display: none;">
								    <label class="col-sm-3 control-label" for="A{!thisCC.id}-notesOld">Notes for Special Processing</label>
								    <div class="col-sm-7">
								        <textarea class="form-control input-sm" name="notes" id="A{!thisCC.id}-notesOld" maxlength="255" rows="3" />
								    </div>
								</div>	

								<div class="form-group">
								    <div class="col-sm-offset-3 col-sm-9">
										<input type="button" id="A{!thisCC.id}-submit_ExistingCC" class="btn-primary" value="Confirm this Credit Card" />
									</div>
								</div>						

							</div>

						</apex:repeat>

							<h3>Enter a new Credit Card</h3>
							<div>
								<div id="cardNameDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label label-sm" for="card-holder-name">Cardholder Name</label>
								    <div class="col-sm-7">
								        <input type="text" class="form-control input-sm" name="card-holder-name" id="card-holder-name" placeholder="First and Last Name" maxlength="30" title="Enter the cardholder's name from the front of the card."/>
								        <span id="cardNameSpan" class="glyphicon form-control-feedback"></span>
								        <span id="cardNameMsg" class="help-block">Cardholder Name is required.</span>
								    </div>						    
								</div>
								<div id="address1Div" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="street-address-1">Street Address 1</label>
								    <div class="col-sm-7">
								        <input type="text" class="form-control input-sm" name="street-address-1" id="street-address-1" placeholder="Street Address" maxlength="30" title="Enter the primary line of the billing address for this card."/>
								        <span id="address1Span" class="glyphicon form-control-feedback"></span>
										<span id="address1Msg" class="help-block">Street Address is required.</span>
								    </div>
								</div>
								<div class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="street-address-2">Street Address 2</label>
								    <div class="col-sm-7">
								        <input type="text" class="form-control input-sm" name="street-address-2" id="street-address-2" placeholder="" maxlength="30" title="Enter the second line of the billing street address for this card."/>
								    </div>
								</div>
								<div id="cityDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="city">City</label>
								    <div class="col-sm-7">
								        <input type="text" class="form-control input-sm" name="city" id="city" placeholder="City Name" maxlength="20" title="Enter the city of the billing address for this card."/>
								    	<span id="citySpan" class="glyphicon form-control-feedback"></span>
								    	<span id="cityMsg" class="help-block">City is required.</span>
								    </div>
								</div>

								<div id="countryDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="country">Country</label>
								    <div class="col-sm-7 selectContainer">
								    						        
								        <select class="form-control input-sm" name="country" id="country">
								        	<apex:repeat value="{!countryOptions}" var="cOpt">
								        		<apex:outputPanel rendered="{!cOpt.Label == 'United States'}">
													<option value="{!cOpt.Value}" selected="selected">{!cOpt.Label}</option>
								        		</apex:outputPanel>

								        		<apex:outputPanel rendered="{!cOpt.Label != 'United States'}">
													<option value="{!cOpt.Value}" >{!cOpt.Label}</option>
								        		</apex:outputPanel>
								        	</apex:repeat>
								        </select>
								        <span id="countrySpan" class="glyphicon form-control-feedback"></span>
								        <span id="countryMsg" class="help-block">Country is required.</span>
								    </div>
								</div>

								<div id="stateDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="state">State</label>
								    <div class="col-sm-7">
								    						        
								        <select class="form-control input-sm" name="state" id="state">
								        	<apex:repeat value="{!stateOptions}" var="sOpt">
								        		<apex:outputPanel rendered="{!sOpt.Label == ''}">
													<option value="{!sOpt.Value}" selected="selected">{!sOpt.Label}</option>
								        		</apex:outputPanel>

								        		<apex:outputPanel rendered="{!sOpt.Label != ''}">
													<option value="{!sOpt.Value}" >{!sOpt.Label}</option>
								        		</apex:outputPanel>
								        	</apex:repeat>
								        </select>
								        <span id="stateSpan" class="glyphicon form-control-feedback"></span>
								        <span id="stateMsg" class="help-block">State is required only if the Country is United States, otherwise it must be blank.</span>
								    </div>
								</div>

								<div id="postalCodeDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="postal-code">Postal Code</label>
								    <div class="col-sm-7">
								        <input type="text" class="form-control input-sm" name="postal-code" id="postal-code" placeholder="Zip / Postal Code" maxlength="10" title="Enter the postal code of the billing address for this card."/>
								        <span id="postalCodeSpan" class="glyphicon form-control-feedback"></span>
								        <span id="postalCodeMsg" class="help-block">Postal Code is required.</span>
								    </div>						    						    
								</div>
								<div id="emailDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="email-address">Email Address</label>
								    <div class="col-sm-7">
								        <input type="email" class="form-control input-sm" name="email-address" id="email-address" placeholder="your@emailAddress.com" maxlength="80" title="Enter the email address where we can reach you."/>
								        <span id="emailSpan" class="glyphicon form-control-feedback"></span>
								        <span id="emailMsg" class="help-block">Email Address is required.</span>
								    </div>
								</div>
								<div id="phoneNumDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="phoneNum">Phone Number</label>
								    <div class="col-sm-7">
								        <input type="text" class="form-control input-sm" name="phoneNum" id="phoneNum" placeholder="+1 456-555-1234" maxlength="14" title="Enter your phone number with country code."/>
								        <span id="phoneNumSpan" class="glyphicon form-control-feedback"></span>
								        <span id="phoneNumMsg" class="help-block">Phone Number is required.</span>
								    </div>
								</div>						
								<div id="cardNumberDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="card-number">Credit Card Number</label>
								    <div class="col-sm-1">
								    	<img id="cc_image" src="{!$Resource.Credit_Card_Icons}/cc_blank.png"/>
								    </div>
								    <div class="col-sm-6">
								        <input type="text" class="form-control input-sm" name="card-number" id="card-number" placeholder="Debit/Credit Card Number"/>
								        <span id="cardNumberSpan" class="glyphicon form-control-feedback"></span>
								        <span id="cardNumberMsg" class="help-block">The Credit Card Number is not valid.</span>
								    </div>
								</div>
								<div id="cardMonthDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="expiry-month">Card Expiration Month</label>
								    <div class="col-sm-4">
								    	<select class="form-control input-sm" name="expiry-month" id="expiry-month">
						                    <option>Month</option>
						                    <option value="01">01 - January</option>
						                    <option value="02">02 - February</option>
						                    <option value="03">03 - March</option>
						                    <option value="04">04 - April</option>
						                    <option value="05">05 - May</option>
						                    <option value="06">06 - June</option>
						                    <option value="07">07 - July</option>
						                    <option value="08">08 - August</option>
						                    <option value="09">09 - September</option>
						                    <option value="10">10 - October</option>
						                    <option value="11">11 - November</option>
						                    <option value="12">12 - December</option>
						                </select>
						                <span id="cardMonthSpan" class="glyphicon form-control-feedback"></span>
						                <span id="cardMonthMsg" class="help-block">Credit Card Expiration Month is required.</span>
								    </div>
								</div>
								<div id="cardYearDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="expiry-yearNew">Card Expiration Year</label>
								    <div class="col-sm-4 selectContainer">

								    	<apex:selectList styleClass="form-control input-sm" size="1" id="expiry-yearNew" required="true" >
								    		<apex:selectOptions value="{!ccExpirationYearOptionsWithEmpty}" />
								    	</apex:selectList>

						                <span id="cardYearSpan" class="glyphicon form-control-feedback"></span>
						                <span id="cardYearMsg" class="help-block">Credit Card Expiration Year is required.</span>
								    </div>
								</div>
								<div id="CVVDiv" class="form-group has-feedback">
								    <label class="col-sm-3 control-label" for="cvvCode">Credit Card CVV</label>
								    <div class="col-sm-4">
								        <input type="text" class="form-control input-sm" name="cvvCode" id="cvvCode" maxlength="4" placeholder="000"/>
								        <span id="CVVSpan" class="glyphicon form-control-feedback"></span>
								        <span id="CVVMsg" class="help-block">Credit Card CVV Code (3 or 4 digits) is required.</span>
								    </div>
								</div>
								<div id="notesDiv" class="form-group has-feedback" style="display: none;">
								    <label class="col-sm-3 control-label" for="notes">Notes for Special Processing</label>
								    <div class="col-sm-7">
								        <textarea class="form-control input-sm" name="notes" id="notes" maxlength="255" rows="3" />
								        <span id="notesSpan" class="glyphicon form-control-feedback"></span>
								    </div>
								</div>						
								<div class="form-group">
								    <div class="col-sm-offset-3 col-sm-9">
										<input type="button" id="submit_NewCC" class="btn-primary" value="Submit Credit Card" />
									</div>
								</div>
								<br/>
							</div>
						</div>
					</apex:outputPanel>
					</apex:form>
				</form>	     
			</div>   
		</apex:define>
	</apex:composition>
</apex:page>