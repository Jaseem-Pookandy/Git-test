<apex:page standardController="Opportunity" extensions="latticeforleads.LatticeAccountDetailsExtensionController">
    <iframe id="latticeIframe" height="850px" width="100%" frameborder="0"/>
    <apex:includeScript value="{!$Resource.latticeforleads__Jquery191}"/>
    <script language="javascript" runat="server">
    $(document).ready(function() {
        var baseLatticeUrl = "{!latticeUrl}";
        var latticeUrl = baseLatticeUrl + "?sin={!$Api.Session_ID}";
        latticeUrl += "&serverurl={!$Api.Partner_Server_URL_90}";
        latticeUrl += "&Directory=salesforce&userlink={!$User.Id}";
        latticeUrl += "&Account={!opportunity.AccountId}";
        latticeUrl += "&HasSalesprism={!isSalesprismInstalled}";
        latticeUrl += "&CustomSettings=" + encodeURIComponent('{!customSettings}');
        
        $("#latticeIframe").attr('src', latticeUrl);
        
        function getAccountLinkField (accountId) {
            var accountDfd = $.Deferred();
            var accountField = "{!accountLinkField}";
            accountDfd.resolve(accountField);
            
            return accountDfd.promise();
        }
        
        function getLeadById (leadId) {
            var leadDfd = $.Deferred();
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.LatticeAccountDetailsExtensionController.getLeadById}',
                leadId,
                function(result, event) {
                    var lead = null;
                    if (event.status) {
                         lead = result;
                    }
                    leadDfd.resolve(lead);
                },
                {escape: true}
            );
            
            return leadDfd.promise();
        }
        
        // Listen for when our Dante sends postMessage events
        window.addEventListener('message', function (evt) {
            if (evt && evt.data.indexOf("IsLeadActiveEvent") !== -1) {
                var separatorIndex = evt.data.indexOf("=");
                var leadId = evt.data.substring(separatorIndex + 1, evt.data.length);
                var leadDfd = getLeadById(leadId);
                $.when(leadDfd).then(function (result) {
                    var lead = result;
                    var isActive = !lead.IsDeleted && !lead.IsConverted; 
                    var message = "IsLeadActiveReturnEvent=" + lead.Id + "?isActive=" + isActive;
                    evt.source.postMessage(message , evt.origin);
                });
            } else if (evt && evt.data.indexOf("GoToSalesprismAccountEvent") !== -1) {
                var accountId = "{!opportunity.AccountId}";
                var salesforceHost = window.location.host;
                var latticeForLeadsPrefix = salesforceHost.indexOf("lattice.");
                if (latticeForLeadsPrefix !== -1) {
                    salesforceHost = salesforceHost.substring(8, salesforceHost.length);
                }
                
                var accountDfd = getAccountLinkField(accountId);
                $.when(accountDfd).then(function (result) {
                    var accountField = result;
                    var salesprismUrl = window.location.protocol + "//salesprism." + salesforceHost +
                        "/apex/salesPRISM?sfdc.tabName=salesPRISM&Account=" + accountField;
                    window.open(salesprismUrl, "_blank");
                });
            }
            
        }, false);
    });
    </script>
</apex:page>